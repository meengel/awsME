### Michael Engel ### 2023-10-25 ### cognito.py ###
from pycognito import Cognito
from pycognito.exceptions import SoftwareTokenMFAChallengeException

from pycognito.utils import RequestsSrpAuth, TokenType

from .downloadME import downloadME
import os

def login(user_pool_id, client_id, user_pool_region, username, password):
    cognito = Cognito(
        user_pool_id = user_pool_id,
        client_id = client_id,
        user_pool_region = user_pool_region,
        username = username,
        id_token = None,
        refresh_token = None,
        access_token = None,
        client_secret = None,
        access_key = None,
        secret_key = None,
        session = None,
        botocore_config = None,
        boto3_client_kwargs = None,
    )

    try:
        cognito.authenticate(password=password)
    except SoftwareTokenMFAChallengeException:
        code = input('Enter the 6-digit code generated by the TOTP generator (such as Google Authenticator):\n')
        cognito.respond_to_software_token_mfa_challenge(code)
    
    print("Logged in!")

    return cognito

def getAuth(cognito, headerkey="Authorization", tokentype=TokenType.ID_TOKEN):
    return RequestsSrpAuth(
        username = None,
        password = None,
        user_pool_id = None,
        client_id = None,
        user_pool_region = None,
        cognito = cognito,
        http_header = headerkey,
        http_header_prefix = "",
        auth_token_type = tokentype,
        boto3_client_kwargs = None,
    )

def cognitoDownload(
    urls,
    outfiles,
    
    user_pool_id,
    client_id,
    user_pool_region,
    
    username,
    password,
    APIkey = None,
    
    threads = 0,
    threads_randomized = False,
    maxtries = 3,
    
    overwrite = False,
    bequiet = False,
    ProgressBar = True,
    
    quote = False,
    chunked = False, # chunk-size in Byte
    AuthorizationKey = "Authorization",
    APIkeyKey = "X-API-Key",
    tokentype = TokenType.ID_TOKEN
):
    # format input
    if isinstance(urls,list):
        pass
    else:
        urls = [urls]
        
    if isinstance(outfiles, list):
        savenames, endings = zip(*[os.path.splitext(outfile) for outfile in outfiles])
        savenames, endings = list(savenames), list(endings)
    else:
        savenames, endings = os.path.splitext(outfiles)

    # login to user-pool
    cognito = login(user_pool_id, client_id, user_pool_region, username, password)
    
    # get authentification callable and determine corresponding parameters for downloadME
    auth = getAuth(cognito, headerkey=AuthorizationKey, tokentype=tokentype)
    
    retrievekwargs = {"auth":auth}
    if APIkey:
        retrievekwargs.update(headers={APIkeyKey:APIkey})
    
    # query
    result = downloadME(
        url = urls, 
        savename = savenames, 
        ending = endings,
        
        threads = threads, 
        threads_randomized = threads_randomized, 
        maxtries = maxtries,
        
        quote = quote,
        chunked = chunked,
        retrievekwargs = retrievekwargs,
        
        overwrite = overwrite, 
        bequiet = bequiet, 
        ProgressBar = ProgressBar,  
    )
    
    # revoke refreshment-token such that the session gets closed -> access and id tokens are valid until expiration!
    cognito.client.revoke_token(
        Token = cognito.refresh_token,
        ClientId = cognito.client_id,
    )
    
    # return
    return result
